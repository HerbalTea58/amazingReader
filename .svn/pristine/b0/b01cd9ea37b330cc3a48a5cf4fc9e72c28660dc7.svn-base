package com.amazingReader.control.Chen;

import com.amazingReader.entity.Manager;
import com.amazingReader.entity.Reader;
import com.amazingReader.entity.ReportChapter;
import com.amazingReader.entity.ReportComment;
import com.amazingReader.service.Interface.ChapterService;
import com.amazingReader.service.Interface.CommentService;
import com.amazingReader.service.Interface.ManagerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

@RequestMapping("/manager")
@RestController
public class ManagerControl {
    @Autowired
    private ManagerService managerService;
    @Autowired
    private CommentService commentService;
    @Autowired
    private ChapterService chapterService;

/*    @Autowired
    private ReaderService readerService;*/


    @RequestMapping("/login.action")
    public void login(Manager manager, HttpServletResponse response, HttpServletRequest request) throws IOException, ServletException {
        //manager.setManagerNeckname(request.getParameter("managerId"));
        System.out.println("\n\n"+manager.getManagerNeckname()+manager.getManagerPassword()+"============");
        String ck=request.getParameter("rem");


        int flag = managerService.login(manager);
        //通过昵称或者id 得到该管理员的账户信息
        Manager myManager=new Manager();
        if (flag==0){
            myManager=managerService.getManagerInfo(Integer.parseInt(manager.getManagerNeckname()));
        }else if(flag==4){
          myManager=managerService.getManagerInfo(manager.getManagerNeckname());
        }

        System.out.println("\n\n"+myManager.getManagerNeckname()+","+myManager.getManagerPortrait());
        if (flag == 0 || flag==4) {

            //登陆成功 创建会话对象
            request.getSession().setAttribute("manager", myManager);

            //设置cookie
            Cookie[] cookies = request.getCookies();
            if ("checked".equals(ck)) {
                boolean f = false;
                if (cookies != null) {
                    for (int i = 0; i < cookies.length; i++) {
                        if (cookies[i].getName().equals("managerloginInfo")) {
                            f = true;
                            break;
                        }
                    }
                    if (!f) {
                        // 构造Cookie对象
                        Cookie cookie = new Cookie("managerloginInfo", manager.getManagerNeckname() + "-" + manager.getManagerPassword());
                        // 设置过期时间
                        cookie.setMaxAge(60 * 60);
                        // 存储
                        cookie.setPath("/");

                        response.addCookie(cookie);
                    }


                }
            }
            //response.sendRedirect(request.getContextPath() + "/JSP/managerPage.jsp");
           request.getRequestDispatcher("/JSP/managerPage.jsp").forward(request,response);

        } else {
                  //  request.setAttribute("flag", flag);
                   /* if (flag==0){
                        int managerId=myManager.getManagerId();
                        //request.setAttribute("managerName",myManager.getManagerId());
                    }else if(flag==4){
                        String name=myManager.getManagerNeckname();
                        //request.setAttribute("managerName",myManager.getManagerNeckname());
                    }*/
                   request.setAttribute("managerName",manager.getManagerNeckname());
                    request.getRequestDispatcher("/JSP/managerLogin.jsp?flag=" + flag).forward(request,response);

                }


    }

    @RequestMapping("/getAllCommentReport.action") //获得全部评论举报
    public void queryAllChapter(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
        //得到当前管理员session的managerId
        Manager managerTrue=(Manager)request.getSession().getAttribute("myManager");
        int managerId=managerTrue.getManagerId();
        //拿到当前管理员的全部章节举报
        List<ReportComment> commentList=commentService.getAllReportComment(managerId);
        request.setAttribute("commentList",commentList);
        request.getRequestDispatcher("/JSP/managerPage.jsp").forward(request,response);

    }
    @RequestMapping("/getAllChapterReport.action") //获得全部章节举报
    public void queryAllChapterReport(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
        //得到当前管理员session的managerId
        Manager managerTrue=(Manager)request.getSession().getAttribute("myManager");
        int managerId=managerTrue.getManagerId();
        //拿到当前管理员的全部章节举报
        List<ReportChapter> chapterList=chapterService.getAllReportedChapter(managerId);
        request.setAttribute("chapterList",chapterList);
        request.getRequestDispatcher("/JSP/managerPage.jsp").forward(request,response);
    }

    @RequestMapping("/getCommentsToDeal.action") //获得未处理评论举报
    public void queryAllCommentsToDeal(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
        //得到当前管理员session的managerId
        Manager managerTrue=(Manager)request.getSession().getAttribute("myManager");
        int managerId=managerTrue.getManagerId();
        //拿到该管理员的未处理评论
        List<ReportComment> commentListToDeal=commentService.getToDealReportComment(managerId);
        request.setAttribute("commentList",commentListToDeal);
        request.getRequestDispatcher("/JSP/managerPage.jsp").forward(request,response);
    }


    @RequestMapping("/getChaptersToDeal.action")
    public void queryAllChaptersToDeal(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
        //得到当前管理员session的managerId
        Manager managerTrue=(Manager)request.getSession().getAttribute("myManager");
        int managerId=managerTrue.getManagerId();
        //拿到该管理员的未处理评论
        List<ReportChapter> chapterListToDeal=chapterService.getToDealReportedChapter(managerId);
        request.setAttribute("chapterList",chapterListToDeal);
        request.getRequestDispatcher("/JSP/managerPage.jsp").forward(request,response);
    }


    @RequestMapping("/deleteComment.action")
    public void deleteComment(HttpServletRequest request,HttpServletResponse response){
        Integer commentId=Integer.parseInt(request.getParameter("commentId"));
        String reportId=request.getParameter("reportId");
        //删除对应的举报评论
        if (commentService.getCommentById(commentId).getCommentTid() == -1){//如果该评论为帖子，那么将删除相关帖子所有内容
            commentService.removePost(commentId);
        }else{
            commentService.removeComment(commentId);//删除该评论
        }
        //对该举报信息做出处理


    }

    @RequestMapping("/isNeckNameExist.action")
    public void checkName(HttpServletResponse response, HttpServletRequest request){
        String name = request.getParameter("name");
        try {
        PrintWriter pw = response.getWriter();
        if(name != null && managerService.getManagerInfo(((Manager)request.getSession().getAttribute("manager")).getManagerId()) != null){
                pw.write("true");
                return;
        }
        pw.write("false");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

   /* @RequestMapping("/getAllReportComment.action")
    public List<ReportComment> getAllReportComment(HttpServletRequest request) throws IOException {
//        Manager manager = (Manager) request.getSession().getAttribute("manager");
        Manager manager = new Manager();
        manager.setManagerId(1);
        manager.setManagerNeckname("男：历史");
        manager.setManagerPassword("123");

        return commentService.getAllReportComment(manager.getManagerId());
    }
    @RequestMapping("/getAllReportedChapter.action")
    public List<ReportChapter> getAllReportedChapter(HttpServletRequest request){
        Manager manager = new Manager();
        manager.setManagerId(1);
        manager.setManagerNeckname("男：历史");
        manager.setManagerPassword("123");

        return chapterService.getAllReportedChapter(manager.getManagerId());
    }

    @RequestMapping("/getToDealReportComment.action")
    public List<ReportComment> getToDealReportComment(HttpServletRequest request) throws IOException {
//        Manager manager = (Manager) request.getSession().getAttribute("manager");
        Manager manager = new Manager();
        manager.setManagerId(1);
        manager.setManagerNeckname("男：历史");
        manager.setManagerPassword("123");

        return commentService.getToDealReportComment(manager.getManagerId());
    }
    @RequestMapping("/getToDealReportedChapter.action")
    public List<ReportChapter> getToDealReportedChapter(HttpServletRequest request){
        Manager manager = new Manager();
        manager.setManagerId(1);
        manager.setManagerNeckname("男：历史");
        manager.setManagerPassword("123");

        return chapterService.getToDealReportedChapter(manager.getManagerId());
    }*/

    @RequestMapping("/getUserReportedTimes.action")
    public void getUserReportedTimes(HttpServletRequest request,HttpServletResponse response){

    }

}
