package com.amazingReader.service.Impl;

import com.amazingReader.entity.Chapter;
import com.amazingReader.entity.ReportChapter;
import com.amazingReader.entity.ReportComment;
import com.amazingReader.mapper.*;
import com.amazingReader.service.Interface.ChapterService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class ChapterServiceImpl implements ChapterService {
    /**
     *  千字价格6分钱
     */
    private final int thousandWordPrice = 6;
    @Autowired
    private ChapterMapper chapterMapper;
    @Autowired
    private ReportChapterMapper reportChapterMapper;
    @Autowired
    private WriterMapper writerMapper;
    @Autowired
    private BookMapper bookMapper;
    @Autowired
    private DealStatusMapper dealStatusMapper;

    @Override
    public int calculatePriceOfChapter(int chapterId) {
        return (int)((chapterMapper.getChapterWordsNum(chapterId)/1000.0)*thousandWordPrice);
    }

    @Override
    public int calculatePriceOfChapters(List<Integer> chapters) {
        int tempPrice = 0;
        for(int chapterId : chapters){
            tempPrice += calculatePriceOfChapter(chapterId);
        }
        return tempPrice;
    }
    @Transactional(propagation= Propagation.REQUIRED,isolation = Isolation.DEFAULT)
    @Override
    public List<ReportChapter> getAllReportedChapter(int managerId) {
        List<ReportChapter> reportChapters = reportChapterMapper.getBymanagerId(managerId);
        for (ReportChapter reportChapter : reportChapters){
            reportChapter.setReportedChapter(
                    chapterMapper.getChapterById(
                            reportChapter.getChapterId()
                    )
            );
            reportChapter.setReportedWriter(
                    writerMapper.getWriter(
                            bookMapper.getBookById(
                                    chapterMapper.getChapterById(
                                            reportChapter.getChapterId()
                                    )
                                            .getChapterBookId())
                                    .getBookWriterId()
                    )
            );
            reportChapter.setReportStatuName(
                    dealStatusMapper.getDealStatu(reportChapter.getReportStatuId()).getQuestionDealStatusName()
            );
        }
        reportChapterMapper.setReadFor(managerId);
        return reportChapters;
    }

    @Override
    public List<ReportChapter> getToDealReportedChapter(int managerId) {
        // TODO
        return null;
    }

    @Override
    public Chapter getChapter(int chapterId) {
        return chapterMapper.getChapterById(chapterId);
    }

    @Override
    public Chapter getChapterByChapterNumAndBookId(int chapterNum, int bookId) {
        return chapterMapper.getChapterById(
                chapterMapper.getChapterIdBy(bookId,chapterNum)
        );
    }

    @Override
    public Integer getNextChapterId(int chapterId) {
        Chapter chapter = chapterMapper.getChapterById(chapterId);
        return chapterMapper.getChapterIdBy(chapter.getChapterBookId(),chapter.getChapterNum()+1);
    }

    @Override
    public Integer getPreChapterId(int chapterId) {
        Chapter chapter = chapterMapper.getChapterById(chapterId);
        return chapterMapper.getChapterIdBy(chapter.getChapterBookId(),chapter.getChapterNum()-1);
    }


}
