package com.amazingReader.control;

import com.amazingReader.entity.*;
import com.amazingReader.service.Interface.BookService;
import com.amazingReader.service.Interface.ChapterService;
import com.amazingReader.service.Interface.ReaderService;
import com.amazingReader.service.Interface.WriterService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@RequestMapping("/bookshelf")
@Controller
public class BookShelfControl {
    @Autowired
    private ReaderService readerService;
    @Autowired
    private WriterService writerService;
    @Autowired
    private BookService bookService;
    @Autowired
    private ChapterService chapterService;

    @RequestMapping("/searchbookshelf.action")
    public void getBookShelfBooks(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         Reader reader= (Reader) request.getSession().getAttribute("reader");
        List<ReaderBookRelation> bookList=readerService.getByReaderId(reader.getReaderId());
        List<Bookshelf> bookList1=new ArrayList<Bookshelf>();
            for (ReaderBookRelation readerBookRelation : bookList) {
                Chapter maxchapter=new Chapter();
                Chapter readingChapter=new Chapter();
                readingChapter.setChapterNum(0);
                Book book = bookService.getBookInfoByBookId(readerBookRelation.getReaderBookBookId());
                BookStyle bookStyle= bookService.getBookStyle(book.getBookStyleId());
                Writer writer = writerService.getWriterInfo(book.getBookWriterId());
                 int maxChapterNum = chapterService.getMaxChapterNumOfBook(book.getBookId());
                if (maxChapterNum!=0) {
                    maxchapter = chapterService.getChapterByChapterNumAndBookId(maxChapterNum,book.getBookId());
                    int readingChapterNum = readerBookRelation.getReaderBookReadingChapterNum();
                    readingChapter = chapterService.getChapterByChapterNumAndBookId(readingChapterNum,book.getBookId());
                }
                Bookshelf bookshelf = new Bookshelf();
                bookshelf.setWriter(writer);
                bookshelf.setBook(book);
                bookshelf.setBookStyle(bookStyle);
                bookshelf.setMaxchapter(maxchapter);
                bookshelf.setReaderBookRelation(readerBookRelation);
                bookshelf.setReadingChapter(readingChapter);
                bookList1.add(bookshelf);

            }
            request.setAttribute("reader",reader);
            request.setAttribute("bookList1",bookList1);
            request.setAttribute("booklistsize",bookList.size());
            request.getRequestDispatcher("/JSP/book.jsp").forward(request,response);
    }

}
