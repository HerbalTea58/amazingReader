package com.amazingReader.service.Impl;

import com.amazingReader.entity.Chapter;
import com.amazingReader.service.Interface.BookService;
import com.amazingReader.service.Interface.OfflineReadService;
import nl.siegmann.epublib.domain.*;
import nl.siegmann.epublib.epub.EpubWriter;
import org.apache.ibatis.javassist.Translator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;

@Service
public class OffLineReadServiceImpl implements OfflineReadService{
    @Autowired
    private BookService bookService;

    private static InputStream getResource(String path ) {
        return Translator.class.getResourceAsStream( path );
    }

    private static Resource getResource(String path, String href ) throws IOException {
        return new Resource( getResource( path ), href );
    }
    @Override
    public Book getFreeAndBoughtChaptersOfBook(String contextPath, Integer bookId, Integer readerId) {
        com.amazingReader.entity.Book bookInfo = bookService.getBookInfoByBookId(bookId);
        List<Chapter> chapters = bookService.getAllFreeChapters(bookId);
        chapters.addAll(bookService.getBoughtChapters(bookId,readerId));
        chapters = new ArrayList<>(new LinkedHashSet<>(chapters));
        try {
            // Create new Book
            Book book = new Book();
            Metadata metadata = book.getMetadata();

            // Set the title
            metadata.addTitle(bookInfo.getBookName());

            // Add an Author
            metadata.addAuthor(new Author(bookInfo.getWriter().getWriterNeckName()));
            // Set cover image
            /*book.setCoverImage(
                    getResource(contextPath+bookInfo.getBookCover(), "cover.jpg") );*/

            // Add Chapter 1
            /*book.addSection("Introduction",
                    getResource("/offLineHelperFiles/chapter.html", "chapter"+1+".html") );*/

           /* // Add css file
            book.getResources().add(
                    getResource("/book1/book1.css", "book1.css") );*/
            FileOutputStream out = null;
           for(Chapter chapter : chapters){
               File chapterHtml = new File(contextPath+"offLineHelperFiles/chapter.html");
               if(!chapterHtml.exists()){
                   chapterHtml.mkdirs();
               }
               out = new FileOutputStream(chapterHtml);
               out.write(chapter.getChapterContent().getBytes());
               book.addSection(chapter.getChapterName(),
                       getResource(contextPath+"offLineHelperFiles/chapter.html", "chapter"+chapter.getChapterId()+".html") );
           }


            // Add Chapter 2
         /*   TOCReference chapter2 = book.addSection( "Second Chapter",
                    getResource("/book1/chapter2.html", "chapter2.html") );*/

           /* // Add image used by Chapter 2
            book.getResources().add(
                    getResource("/book1/flowers_320x240.jpg", "flowers.jpg"));*/

            // Add Chapter2, Section 1
           /* book.addSection(chapter2, "Chapter 2, section 1",
                    getResource("/book1/chapter3.html", "chapter3.html"));*/

            // Add Chapter 3
/*            book.addSection("Conclusion",
                    getResource("/book1/chapter3.html", "chapter3.html"));*/

            // Create EpubWriter
            EpubWriter epubWriter = new EpubWriter();

            File file = new File("D:/"+bookInfo.getBookName()+".epub");
            if(!file.exists()){
                file.mkdirs();
            }

            // Write the Book as Epub
            epubWriter.write(book, new FileOutputStream(file));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    /*@Test
    public void test(){
        getFreeAndBoughtChaptersOfBook(31,22);
    }*/

}
