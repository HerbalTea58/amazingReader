package com.amazingReader.control;

import com.amazingReader.entity.*;
import com.amazingReader.entity.Draft;
import com.amazingReader.entity.utilEntity.WriterOrder;
import com.amazingReader.service.Interface.BookService;
import com.amazingReader.service.Interface.ChapterService;
import com.amazingReader.service.Interface.ManagerService;
import com.amazingReader.service.Interface.WriterService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

@RequestMapping("/Writer")
@Controller
public class WriterControl {
    @Autowired
    private WriterService writerService;
    @Autowired
    private BookService bookService;
    @Autowired
    private ChapterService chapterService;
    @Autowired
    private ManagerService managerService;


    @RequestMapping("/WriterDate.action")
    public void FindWriterDate(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        Writer writer = (Writer)session.getAttribute("LoginWriter");

        Calendar c = Calendar.getInstance();
        c.add(Calendar.DAY_OF_MONTH, -1);
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String time = formatter.format(c.getTime());


        List<Book> bookList =  bookService.getBookByWriterId(writer.getWriterId());
        int alltimes = writerService.getAllClickTimes(writer.getWriterId());
        int timetimes = writerService.getAllClickTimesByTime(writer.getWriterId(), time);
        int avgtimes = writerService.getAvgClickTimes(writer.getWriterId());
        int maxtimes = writerService.getMaxClickTimes(writer.getWriterId());
        request.setAttribute("AllTimes", alltimes);
        request.setAttribute("YesTimes", timetimes);
        request.setAttribute("AvgTimes", avgtimes);
        request.setAttribute("MaxTimes",maxtimes);
        request.setAttribute("bookList", bookList);
        request.getRequestDispatcher("/JSP/writer_data.jsp").forward(request,response);
    }

    @RequestMapping("/WriterDataByBook.action")
    public void FindWriterDataByBook(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();

        Calendar c = Calendar.getInstance();
        c.add(Calendar.DAY_OF_MONTH, -1);
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String time = formatter.format(c.getTime());
//        String strStart = mDateTime.substring(0, 10);

        int bookid = Integer.parseInt(request.getParameter("bookid"));
        Writer writer = (Writer)session.getAttribute("LoginWriter");
        List<Book> bookList =  bookService.getBookByWriterId(writer.getWriterId());
        int alltimes = bookService.getClickTimes(bookid);
        int timetimes = writerService.getClickTimesByDate(bookid, time);
        int avgtimes = writerService.getAvgClickTimes(bookid);
        int maxtimes = writerService.getMaxClickTimes(bookid);
        request.setAttribute("AllTimes", alltimes);
        request.setAttribute("YesTimes", timetimes);
        request.setAttribute("AvgTimes", avgtimes);
        request.setAttribute("MaxTimes",maxtimes);
        request.setAttribute("bookList", bookList);
        request.getRequestDispatcher("/JSP/writer_data.jsp").forward(request,response);
    }

    @RequestMapping("/WriterIncome.action")
    public void FindWriterIncome(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        Writer writer = (Writer)session.getAttribute("LoginWriter");
        List<Book> bookList =  bookService.getBookByWriterId(writer.getWriterId());
        request.setAttribute("bookList", bookList);
        Double income = writerService.getAllIncome(writer.getWriterId());
        List<WriterOrder> writerOrderList = writerService.getAllOrder(writer.getWriterId());
        System.out.println("HHHHHHHHHHHH"+writerOrderList);
        request.setAttribute("AllIncome", income);
        request.setAttribute("AllOrder", writerOrderList);
        request.getRequestDispatcher("/JSP/writer_income.jsp").forward(request,response);
    }

    @RequestMapping("/WriterIncomeDetail1.action")
    public void FindWriterIncomeDetail1(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int year = Integer.parseInt(request.getParameter("findyear"));
        int month = Integer.parseInt(request.getParameter("findmonth"));
        HttpSession session = request.getSession();
        Writer writer = (Writer)session.getAttribute("LoginWriter");
        double income = writerService.getIncomeByDate(year,month,writer.getWriterId());
        List<WriterOrder> writerOrderList = writerService.getWriterOrderByWriterIdAndTime(year,month,writer.getWriterId());
        List<Book> bookList =  bookService.getBookByWriterId(writer.getWriterId());
        request.setAttribute("bookList", bookList);
        request.setAttribute("AllIncome", income);
        request.setAttribute("AllOrder", writerOrderList);
        request.getRequestDispatcher("/JSP/writer_income.jsp").forward(request,response);
    }
    @RequestMapping("/WriterIncomeDetail2.action")
    public void FindWriterIncomeDetail2(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        Writer writer = (Writer)session.getAttribute("LoginWriter");
        int bookId = Integer.parseInt(request.getParameter("findnovels"));
        double income = writerService.getIncomeByBookId(bookId);
        List<WriterOrder> writerOrderList = writerService.getWriterOrderByBookId(bookId);
        request.setAttribute("AllIncome", income);
        request.setAttribute("AllOrder", writerOrderList);
        List<Book> bookList =  bookService.getBookByWriterId(writer.getWriterId());
        request.setAttribute("bookList", bookList);
        request.getRequestDispatcher("/JSP/writer_income.jsp").forward(request,response);
    }

    @RequestMapping("/WriterQuestion.action")
    public void WriterQuestion(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        Writer writer = (Writer) session.getAttribute("LoginWriter");
        List<Question> questionList = writerService.getQuestionByWriterId(writer.getWriterId());
        request.setAttribute("QuestionList", questionList);
        request.getRequestDispatcher("/JSP/writer_question.jsp").forward(request, response);
    }

    @RequestMapping("/AddWriterQuestion.action")
    public void AddWriterQuestion(String title, String detail,HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Question question = new Question();
        HttpSession session = request.getSession();
        Writer writer = (Writer)session.getAttribute("LoginWriter");
//        System.out.println(writer.getWriterId());
        question.setSenderId(writer.getWriterId());
        int maxnum = managerService.getMaxIndex();
        question.setManagerId((int)(Math.random()*maxnum+1));
        question.setContent(title+"#"+detail);
        question.setQuestionDealStatusId("1");
        boolean state = writerService.addQuestion(question);
        request.setAttribute("state", state);
        request.getRequestDispatcher("/Writer/WriterQuestion.action").forward(request,response);
    }


    @RequestMapping("/WriterNovels.action")
    public void WriterNovels(String title, String detail,HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        Writer writer = (Writer)session.getAttribute("LoginWriter");
        List<Book> bookList = bookService.getBookByWriterId(writer.getWriterId());
        request.setAttribute("NovelList", bookList);
        request.getRequestDispatcher("/JSP/writer_novels.jsp").forward(request,response);
    }

    @RequestMapping("/WriterAddNovels.action")
    public void WriterAddNovels(String title, String detail,HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        Writer writer = (Writer)session.getAttribute("LoginWriter");
        List<BookStyle> maleList = bookService.getMaleFirstLabel();
        List<BookStyle> femaleList = bookService.getFemaleFirstLabel();
        List<Book> bookList = bookService.getBookByWriterId(writer.getWriterId());
        request.setAttribute("NovelList", bookList);
        request.setAttribute("MaleList", maleList);
        request.setAttribute("FemaleList", femaleList);
//        request.setAttribute("StyleList", styleList);
        request.getRequestDispatcher("/JSP/writer_addBook.jsp").forward(request,response);
    }

    @RequestMapping(value = "/selectStyle.action" )
    public @ResponseBody List<BookStyle> selectStyle(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int styleId = Integer.parseInt(request.getParameter("styleId"));
        System.out.println("++++++styleID++++++++++"+ styleId+"+++++++++");
        List<BookStyle> bookStyleList = bookService.getStyle(styleId);
        return bookStyleList;
    }

    @RequestMapping("/WriterAddNewNovel.action")
    public void WriterAddNewNovel(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Book book = new Book();
        HttpSession session = request.getSession();
        Writer writer = (Writer)session.getAttribute("LoginWriter");
        String name = request.getParameter("name");
        int bookstyle = Integer.parseInt(request.getParameter("bookstyle"));
        String introduction = request.getParameter("introduction");
        book.setBookName(name);
        book.setBookCover("image/book/book.jpg");
        book.setBookWriterId(writer.getWriterId());
        book.setBookStyleId(bookstyle);
        book.setBookShortDescribe(introduction);
        writerService.createBook(book);
        request.getRequestDispatcher("/JSP/writer_addBook.jsp").forward(request,response);
    }

}
