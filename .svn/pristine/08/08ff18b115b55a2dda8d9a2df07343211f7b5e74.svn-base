package com.amazingReader.service.Impl;

import com.amazingReader.entity.Book;
import com.amazingReader.entity.Chapter;
import com.amazingReader.mapper.*;
import com.amazingReader.service.Interface.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class BookServiceImpl implements BookService {
    public static final int thousandWordsPrice = 6;

    @Autowired
    private BookMapper bookMapper;
    @Autowired
    private ChapterMapper chapterMapper;
    @Autowired
    private BookStyleMapper bookStyleMapper;
    @Autowired
    private BookLabelRelationMapper bookLabelRelationMapper;
    @Autowired
    private ReaderBookRelationMapper readerBookRelationMapper;
    @Autowired
    private WriterMapper writerMapper;

    @Transactional(propagation= Propagation.REQUIRED,isolation = Isolation.DEFAULT)
    @Override
    public Book getBookInfoByChapterId(int chapterId) {
        int bookId = chapterMapper.getChapterById(chapterId).getChapterBookId();
        return getBookInfoByBookId(bookId);
    }
    @Transactional(propagation= Propagation.REQUIRED,isolation = Isolation.DEFAULT)
    @Override
    public Book getBookInfoByBookId(int bookId) {
        Book book = bookMapper.getBookById(bookId);
            book.setStyleName(bookStyleMapper.getBookStyle(book.getBookStyleId()).getBookStyleName());
            book.setLabels(bookLabelRelationMapper.getLabelsOfBook(bookId));
            book.setReaderNum(readerBookRelationMapper.countReader(bookId));
            book.setWordsNum(bookMapper.getWordsNumOfBook(bookId));
            book.setClickTimes(bookMapper.getClickNum(bookId));
            book.setWriter(writerMapper.getWriter(book.getBookWriterId()));
        return book;
    }

    @Override
    public int getClickTimes(int bookId) {
        return bookMapper.getClickNum(bookId);
    }

    @Override
    public int getRecommendTickets(int bookId) {
        return bookMapper.getBookById(bookId).getBookRecommendTicket();
    }

    @Override
    public int calculateBookPrice(int bookId) {
        return (int)((bookMapper.getWordsNumOfBook(bookId)/1000.0)*thousandWordsPrice);
    }
    @Override
    public List<Chapter> getMenuOfBook(int bookId) {
        return chapterMapper.getChaptersByBookId(bookId);
    }

    @Override
    public Book getBookByName(String bookName) {
        return bookMapper.getBookByName(bookName);
    }

    @Override
    public Book getBookByWriterId(int writerId) {
        return bookMapper.getBookByWriterId(writerId);
    }

    @Override
    public List<Book> getBooksInfoByIds(List<Integer> booksIds){
        List<Book> books = new ArrayList<Book>();
        if (booksIds!=null){
            for (Integer bookId :booksIds){
                books.add(getBookInfoByBookId(bookId));
            }
        }

        return books;
    }

    @Override
    public Integer getFirstChapterIdOfBook(int bookId) {
        return chapterMapper.getFirstChapterIdOf(bookId);
    }

    @Override
    public List<Book> queryBooksOfMan() {
        return getBooksInfoByIds(bookMapper.queryBooksOfMan());
    }

    @Override
    public List<Book> queryBooksOfWoman() {
        return getBooksInfoByIds(bookMapper.queryBooksOfWoman());
    }

    @Override
    public boolean isFinalChapter(int chapterId) {
        Chapter chapter = chapterMapper.getChapterById(chapterId);
        int bookId = chapter.getChapterBookId();

        System.out.println("\n"+"书籍最大章节号"+chapterMapper.getMaxChapterNumOfBook(bookId)+"\n");

        return chapterMapper.getMaxChapterNumOfBook(bookId) == chapter.getChapterNum();
    }

    @Override
    public List<Book> getBooksByBookStyle(int bookStyleId) {
       List<Integer> books = bookMapper.getBooksByStyleId(bookStyleId);
       List<Book> booksInfo = new ArrayList<Book>();
       if(books.size()!=0){
           for (Integer bookId :books){
               booksInfo.add(getBookInfoByBookId(bookId));
           }
       }
        return booksInfo;
    }

    public List<Book> showBooksPrepared(List<Book> bookList){
        if (bookList!=null){
            Collections.shuffle(bookList);//打乱顺序
            int i = 1;
            for (Book b : bookList) {
                b.setReaderNum(i);
                i++;
            }
        }

        return bookList;
    }


}
